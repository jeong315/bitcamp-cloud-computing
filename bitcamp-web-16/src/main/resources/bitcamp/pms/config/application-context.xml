<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<!-- <context:annotation-config/> -->
	<!-- 위에꺼가 아래꺼에 포함되어 있기 때문에 지워줘도 됨, 목적 : 객체 생성의 자동화 -->
	<context:component-scan base-package="bitcamp.pms">
		<!-- 등록하는 대체 문법일뿐 -->
		<context:exclude-filter type="regex" expression="bitcamp.pms.test.*" />
		<!--bitcamp.pms.test.* 는 무시하라 -->
	</context:component-scan>

    <!-- Spring WebMVC 관련 애노테이션을 처리할 객체들을 등록한다. -->
    <mvc:annotation-driven enable-matrix-variables="true" />

	<!-- 공장에서 SqlSessionFactory 만들기 => 실행 원리! => - class 속성에 지정된 클래스가 FactoryBean 
		구현체라면, => 그 객체를 만들어 저장하는 것이 아니라 => 그 객체의 getObject()를 호출하면 그 리턴 값을 id이름으로 
		저장한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 이 객체에 대해서 getObject의 리턴값을 id값으로 저장하는 것이다. -->
		<!-- 1.Bean태그로 Sql 2. 자바코드에서 configuration @Bean 3. sql세션 팩토리를 만들어주는 클래스를 통해 만드는 방법 -->
<!-- 		<property name="configLocation" value="bitcamp/pms/config/mybatis-config.xml" /> -->
		<property name="dataSource" ref="dataSource" />		
		<property name="mapperLocations" value="classpath*:bitcamp/pms/sql/**/*.xml" />
		<property name="typeAliasesPackage" value="bitcamp.pms.domain"/><!-- 별명을 자동으로 부여하라 -->
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 트랜잭션 추가 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	
	<!-- DAO 인터페이스로부터 구현체를 자동생성하는 객체 등록 
	       =>DAO 구현체가 사용할 SQL 맵퍼 파일은 namespace값으로 찾는다.
	       => 따라서 인터페이스 명과 SQL 맵퍼의 name 값은 같아야 한다.
	       => 또한 인터페이스의 메서드명과 SQL id는 같아야 한다. -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="bitcamp.pms.dao" />
    </bean>
    
	<!-- ↓단축태그 : .properties 파일을 읽어서 그 데이터를 보관할 객체를 등록한다. -->
	<context:property-placeholder location="classpath:bitcamp/pms/config/jdbc.properties"/>
	
	<!-- JSP 파일을 /WEB-INF/jsp 폴더에서 찾을 수 있도록 ViewResolver를 교체한다. -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>
	
</beans>